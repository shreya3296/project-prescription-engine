# -*- coding: utf-8 -*-
"""bloom-distillation-v3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19c9j0O8n_1CBi7cTVbM9Q1LByRFPZVz_
"""

!pip install torch transformers dvc dvc-gs

!pip install accelerate -U

!pip install accelerate

!pip install transformers[torch]

!pip install transformers --upgrade

!pip install wandb -qU

# Log in to W&B account
import wandb

wandb.init(project="bloom_fine_tuning_v3", entity="ac215-the-prescribers")

import wandb
import transformers
import torch
import os
import numpy as np
import pandas as pd
import torch.nn as nn
from torch.utils.data import DataLoader, Dataset
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder

from transformers import (
    BloomTokenizerFast,
    BloomForSequenceClassification,
    BertForSequenceClassification,
    TrainingArguments,
    Trainer,
    EarlyStoppingCallback
)
from google.colab import auth, drive
import matplotlib.pyplot as plt

auth.authenticate_user()

# Load the teacher model
!mkdir -p /content/finetuned_model
!gsutil -m cp -r "gs://finetunned_760m_bloom/bloom_icd_10/finetuned_model/*" "/content/finetuned_model/"
teacher_model_path = "/content/finetuned_model"
tokenizer = BloomTokenizerFast.from_pretrained(teacher_model_path, repo_type="local")
teacher_model = BloomForSequenceClassification.from_pretrained(teacher_model_path)

#load the data
!gcloud config set project 'steel-climber-398320'
!gsutil cp gs://training_dataset_bloom/merged_symp_icd/symptoms_icd10.json ./training_data.jsonl
training_data = pd.read_json('training_data.jsonl', lines=True)

label_encoder = LabelEncoder()
training_data ['encoded_labels'] = label_encoder.fit_transform(training_data['icd10_code'])

train_data, test_data = train_test_split(training_data, test_size=0.1)

# reset the indices
train_data = train_data.reset_index(drop=True)
test_data = test_data.reset_index(drop=True)

class AdvancedNN(nn.Module):
    def __init__(self, input_size, num_classes, hidden_dim, lstm_layers, bidirectional):
        super(AdvancedNN, self).__init__()
        # LSTM Layer
        self.lstm = nn.LSTM(input_size, hidden_dim, num_layers=lstm_layers, batch_first=True, bidirectional=bidirectional)
        lstm_output_size = hidden_dim * 2 if bidirectional else hidden_dim

        # Fully Connected Layers
        self.fc1 = nn.Linear(lstm_output_size, 1024)
        self.relu1 = nn.ReLU()
        self.dropout1 = nn.Dropout(0.5)
        self.fc2 = nn.Linear(1024, 512)
        self.relu2 = nn.ReLU()
        self.dropout2 = nn.Dropout(0.5)
        self.fc3 = nn.Linear(512, 256)
        self.relu3 = nn.ReLU()
        self.fc4 = nn.Linear(256, num_classes)  # Output layer

    def forward(self, x):
        # Reshape x to be 3-dimensional for LSTM input
        # Assuming x is originally 2-dimensional (batch_size, sequence_length)
        x = x.unsqueeze(-1)

        # LSTM layer
        x, _ = self.lstm(x)

        # Take the output of the last LSTM time step
        x = x[:, -1, :]  # Assuming x is 3D and this is valid

        # Fully Connected Layers
        x = self.fc1(x)
        x = self.relu1(x)
        x = self.dropout1(x)
        x = self.fc2(x)
        x = self.relu2(x)
        x = self.dropout2(x)
        x = self.fc3(x)
        x = self.relu3(x)
        x = self.fc4(x)
        return x

input_size = 1536 #must change to be relative
hidden_dim = 512 #must change to be relative
lstm_layers = 2 #must change to be relative
bidirectional = True
num_classes = train_data['icd10_code'].nunique()

student_model = AdvancedNN(input_size, num_classes, hidden_dim, lstm_layers, bidirectional)

#class SimpleNN(nn.Module):
#    def __init__(self, input_size, num_classes):
#        super(SimpleNN, self).__init__()
#        self.fc1 = nn.Linear(input_size, 512)
#        self.relu = nn.ReLU()
#        self.fc2 = nn.Linear(512, num_classes)  # Output layer
#
#    def forward(self, x):
#        out = self.fc1(x)
#        out = self.relu(out)
#        out = self.fc2(out)
#        return out

# Assuming input size and number of classes are known
#input_size = 1536
#num_classes = train_data['icd10_code'].nunique()
#student_model = SimpleNN(input_size, num_classes)
# model is by default on CPU

#train_data

class CustomDataset(Dataset):
    def __init__(self, texts, labels, tokenizer, max_length=1536):
        self.texts = texts
        self.labels = labels
        self.tokenizer = tokenizer
        self.max_length = max_length

        # Encode string labels to integers
        self.label_encoder = LabelEncoder()
        self.encoded_labels = self.label_encoder.fit_transform(labels)

    def __len__(self):
        return len(self.texts)

    def __getitem__(self, idx):
        # Tokenize the text
        encoded = self.tokenizer.encode_plus(
            self.texts[idx],
            add_special_tokens=True,
            return_tensors='pt',
            padding='max_length',
            truncation=True,
            max_length=self.max_length
        )
        input_ids = encoded['input_ids'].flatten()

        # Ensure input_ids is the correct shape
        if len(input_ids) != self.max_length:
            padding = [0] * (self.max_length - len(input_ids))
            input_ids = torch.cat((input_ids, torch.tensor(padding)), dim=0)

        # Fetch the corresponding encoded label
        label = self.encoded_labels[idx]

        return input_ids, label

train_dataset = CustomDataset(train_data['symptoms'], train_data['icd10_code'], tokenizer)
train_dataloader = DataLoader(train_dataset, batch_size=256, shuffle=True)

# Loss and Optimizer
criterion = nn.CrossEntropyLoss() #this is important to have the implicit softmax in pythoch
optimizer = torch.optim.Adam(student_model.parameters(), lr=0.001)

train_data.reset_index(drop=True, inplace=True)

num_epochs = 3

for epoch in range(num_epochs):
    for batch in train_dataloader:
        print("Epoch:",epoch )

        input_ids, labels = batch

        # Ensure input_ids and labels are of the correct type
        input_ids = input_ids.float()
        labels = torch.tensor(labels, dtype=torch.long)

        # Forward pass
        outputs = student_model(input_ids)
        loss = criterion(outputs, labels)

        # Backward and optimize
        optimizer.zero_grad()
        loss.backward()
        optimizer.step()

# Prepare validation dataset
test_dataset = CustomDataset(test_data['symptoms'], test_data['icd10_code'], tokenizer)
test_dataloader = DataLoader(test_dataset, batch_size=8, shuffle=True)

# Validation Function
def validate(model, dataloader, criterion):
    model.eval()  # Set the model to evaluation mode
    total_loss, total_correct, total_samples = 0, 0, 0

    with torch.no_grad():
        for batch in dataloader:
            input_ids, labels = batch
            input_ids = input_ids.float()
            labels = torch.tensor(labels, dtype=torch.long)

            # Forward pass
            outputs = model(input_ids)
            loss = criterion(outputs, labels)
            total_loss += loss.item()

            # Calculate accuracy
            _, predicted = torch.max(outputs.data, 1)
            total_samples += labels.size(0)
            total_correct += (predicted == labels).sum().item()

    avg_loss = total_loss / len(dataloader)
    accuracy = total_correct / total_samples
    return avg_loss, accuracy

# Training loop with validation
num_epochs = 15

#this is for plotting
train_losses, val_losses, val_accuracies = [], [], []

for epoch in range(num_epochs):
    # Training
    student_model.train()
    for batch in train_dataloader:
        input_ids, labels = batch
        input_ids = input_ids.float()
        labels = torch.tensor(labels, dtype=torch.long)

        # Forward pass
        outputs = student_model(input_ids)
        loss = criterion(outputs, labels)

        # Backward and optimize
        optimizer.zero_grad()
        loss.backward()
        optimizer.step()

    # Validation
    val_loss, val_accuracy = validate(student_model, test_dataloader, criterion)
    print(f'Epoch [{epoch+1}/{num_epochs}], Loss: {loss.item():.4f}, Validation Loss: {val_loss:.4f}, Validation Accuracy: {val_accuracy:.4f}')

    # append to lists for plotting
    train_losses.append(loss.item())
    val_losses.append(val_loss)
    val_accuracies.append(val_accuracy)

#plot the training of the model
# Plotting
plt.figure(figsize=(12, 4))
plt.subplot(1, 2, 1)
plt.plot(train_losses, label='Training Loss')
plt.plot(val_losses, label='Validation Loss')
plt.title('Losses')
plt.legend()

plt.subplot(1, 2, 2)
plt.plot(val_accuracies, label='Validation Accuracy')
plt.title('Validation Accuracy')
plt.legend()

plt.show()

## prompt to test the student model
test_prompt = "i have red spots in my face"

# Tokenize the test prompt
encoded_test_prompt = tokenizer.encode_plus(
    test_prompt,
    add_special_tokens=True,
    return_tensors='pt',
    padding='max_length',
    truncation=True,
    max_length=1536
)
input_ids_test = encoded_test_prompt['input_ids'].flatten()

# Ensure the input is the correct shape
input_ids_test = input_ids_test.unsqueeze(0)

# make sure the student model is in evaluation mode
student_model.eval()

with torch.no_grad():
    # Forward pass
    output = student_model(input_ids_test.float())
    prediction = torch.argmax(output, dim=1)
    predicted_label = label_encoder.inverse_transform(prediction.numpy())

print("Predicted Label:", predicted_label[0])

#first save the model locally
save_directory = "/content/distilled_model"
torch.save(student_model.state_dict(), save_directory)

#save the model in a bucket in GCP
!gsutil cp -r /content/distilled_model gs://finetunned_destillation/destilled_bloom_icd_10/

